import { app, BrowserWindow, ipcMain, IpcMainEvent, OpenDialogSyncOptions, dialog } from 'electron';
import { SelectFileChannel, WalkChannel, SaveFileChannel } from "./preload/IpcChannel";
import * as fsWalk from '@nodelib/fs.walk';
import * as fs from 'fs';
import * as path from 'path';
import * as util from 'util';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nativeWindowOpen: true,
      webSecurity: process.env.NODE_ENV !== 'development',
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle(
  SelectFileChannel.TO_MAIN,
  (_event: IpcMainEvent, openDialogOptions?: OpenDialogSyncOptions): string[] => {
    return dialog.showOpenDialogSync({
      ...openDialogOptions
    });
  }
)

ipcMain.handle(
  WalkChannel.TO_MAIN,
  (_event: IpcMainEvent, directory: string, extensions?: string[]): string[] => {
    return fsWalk.walkSync(directory, {
      entryFilter: entry => extensions.some(extension => entry.name.toLowerCase().endsWith(`.${extension.toLowerCase()}`)),
      followSymbolicLinks: true,
    }).map(entry => entry.path);
  }
)

const copyFile = util.promisify(fs.copyFile)

ipcMain.handle(
  SaveFileChannel.TO_MAIN,
  (_event: IpcMainEvent, files: string[], toDirectoryPath: string): Promise<void[]> => {
    const digits = files.length.toString().length
    return Promise.all(files.map((file, i) => {
      const dest = path.join(toDirectoryPath, `${(i + 1).toString().padStart(digits, "0")}_${path.basename(file)}`);
      copyFile(file, dest);
    }));
  }
)
